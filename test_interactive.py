# test_interactive.py (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
import os
from dotenv import load_dotenv

# ‚≠ê ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£ import ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ
load_dotenv()

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API key ‡∏Å‡πà‡∏≠‡∏ô
if not os.getenv("OPENAI_API_KEY"):
    print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö OPENAI_API_KEY ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env")
    print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .env ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°:")
    print("   OPENAI_API_KEY=your_api_key_here")
    exit(1)

# ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import agent ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß
from agent.core import AdvancedAgenticAI
import json

def interactive_test():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
    print("ü§ñ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö Agentic AI")
    print("‡∏û‡∏¥‡∏°‡∏û‡πå 'quit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å")
    print("-" * 50)
    
    try:
        print("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Agent...")
        agent = AdvancedAgenticAI()
        print("‚úÖ Agent ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
        
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Agent ‡πÑ‡∏î‡πâ: {e}")
        return
    
    while True:
        user_input = input("\nüë§ ‡∏Ñ‡∏∏‡∏ì: ")
        
        if user_input.lower() in ['quit', 'exit', '‡∏≠‡∏≠‡∏Å']:
            print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô!")
            break
        
        if user_input.strip():
            print("\nü§ñ AI: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...")
            
            try:
                response_data = agent.process(user_input)
                print(f"ü§ñ AI: {response_data['response']}")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                if response_data.get("planning_used"):
                    print(f"\nüìã ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô: ‡πÉ‡∏ä‡πà")
                    print(f"üìä ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô: {response_data['complexity_score']:.2f}")
                
                if response_data.get("actions_taken"):
                    print(f"‚ö° ‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: {', '.join(response_data['actions_taken'])}")
                    
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if __name__ == "__main__":
    interactive_test()